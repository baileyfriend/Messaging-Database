SPOOL project.out
SET ECHO ON
@dropTables.sql
/*
CIS 353 - Database Design Project
Bailey Freund
Madison Brooks
Timothy Devries
Zach Myers
*/

--In the DDL, every IC must have a unique name; e.g. IC5, IC10, IC15, etc.
CREATE TYPE userEmail as TABLE OF VARCHAR(254);
/

CREATE TABLE users(
userID INTEGER NOT NULL, --for some reason uid breaks sqlplus
age INTEGER NOT NULL, --  user must be above 12
EMAIL userEmail,         --multivalued attribute, refers to type user email created above
FNAME VARCHAR(35) NOT NULL,
LNAME VARCHAR(35) NOT NULL,
-- uIC1:userID is the primary key - generated by app - no two will be the same
CONSTRAINT uIC111 primary key(userID),
--a constraint user must be above 12 to use app
CONSTRAINT uIC222 CHECK (age > 12)
)
NESTED TABLE EMAIL STORE AS userEmail_Table;
/
Create table conversation
(
  cid integer not null,
  constraint cIC1 primary key(cid)
);

Create table message --this is a weak entity
(
  messageKey VARCHAR(200) PRIMARY KEY,  -- must have some kind of independent key
  timeSent TIMESTAMP, --not part of key, does not need to be unique
  muid INTEGER NOT NULL, --message user id - part of key
  mcid INTEGER NOT NULL, --part of key - message conversation id
  txt LONG NOT NULL, --contents of the message - contains text and cannot send a null message
  --create constraints - weak entity defined by timesent, user.uid, conversation.cid
  --constraint messagePKey primary key(timeSent),
  constraint messageFKeyUser foreign key(muid) references users(userID) ON DELETE SET NULL,
  constraint messageFKeyConversation foreign key(mcid) references conversation(cid) ON DELETE SET NULL
);

Create table media  --can only send one media per message
(
  mKey VARCHAR(200) NOT NULL, --which message is the media a part of? --media must be part of an existing message - therefore there must be a message sent at the same time by the same user in the same conversation for this constraint to be fulfilled
  fileName VARCHAR(260), --260 is max filename length - excludes extension
  fileType VARCHAR(5), --fileType (.gif, .jpg, etc) should not be more than 5 characters long
  --Constraints:
  CONSTRAINT mediaFkeyMessageID foreign key(mKey) references message(messageKey),
--a constraint that requires first character of fileType to be a '.' (if it doesn't start with . then its not a filetype)
  CONSTRAINT mediaFileCheck CHECK (filetype LIKE '.%')
);

Create table takesPartIn
(
  userID INTEGER not null,
  cid INTEGER not null,
--foreign keys from user and conversation
  constraint userForeignKey foreign key(userID) references users(userID),
  constraint convForeignKey foreign key(cid) references conversation(cid)
);

Create Table isFriendsWith
(
  userID INTEGER not null,
  friendID INTEGER,
--both combine to make the key
  CONSTRAINT friendsUserFKey foreign key(userID) references users(userID),
  CONSTRAINT friendsFKey foreign key(friendID) references users(userID)
);

Create Table avatar --has a 1:1 relationship with user - this table contains a list of available profile pictures - user can only pick from this list - no uploading their own pic
( --every avatar can only have 1 user assigned to it - no avatar repeats.
  --a user may or may not have an avatar
  avatarFileName VARCHAR(260) PRIMARY KEY,
  userID INTEGER
);

Create Table iptable
(--The ip address is the key, and users is an attribute.
  --This means that one user can have multiple ip adresses,
  --but each ip address only has one user.
  ipaddress VARCHAR(15) PRIMARY KEY, --In format nnn.nnn.nnn.nnn
  userID INTEGER
);
--
SET FEEDBACK OFF
-- Insert into users
INSERT INTO users VALUES (1000, 21, userEmail('freundb@gmail.com', 'freundb2@yahoo.com'), 'Bailey', 'Freund');
INSERT INTO users VALUES (1010, 18, userEmail('someguy@gmail.com', 'mrfred@charter.net'), 'Fred', 'Digglesbee');
INSERT INTO users VALUES (1020, 39, userEmail('bbbattlestargalactica@gmail.com', 'dwight@schrutefarms.com'), 'Dwight', 'Schrute');
INSERT INTO users VALUES (1030, 40, userEmail('westfield@architect.com'), 'Ted', 'Mosby');
INSERT INTO users VALUES (1040, 16, userEmail('peter@gmail.com', 'spam@spammer.edu', 'thisperson@pizza.com'), 'Peter', 'Ventimiglia');

--Insert into conversation
INSERT INTO conversation VALUES (100);
INSERT INTO conversation VALUES (110);
INSERT INTO conversation VALUES (120);
INSERT INTO conversation VALUES (130);

--Insert into message
INSERT INTO message VALUES (1, TO_DATE('2016-NOV-25 17:30','YYYY-MON-DD HH24:MI','NLS_DATE_LANGUAGE=AMERICAN'), 1000, 100, 'Hello world :)');
INSERT INTO message VALUES (2, TO_DATE('2016-NOV-25 17:34','YYYY-MON-DD HH24:MI','NLS_DATE_LANGUAGE=AMERICAN'), 1010, 100, 'It works!!');


--Insert into media
INSERT INTO media VALUES (2, 'congrats', '.gif');


--Insert into takesPartIn
INSERT INTO takesPartIn VALUES (1000, 100);
INSERT INTO takesPartIn VALUES (1010, 100);

--Insert into isFriendsWith
INSERT INTO isFriendsWith VALUES (1000, 1010);
INSERT INTO isFriendsWith VALUES (1010, 1000);

--Insert into avatar
INSERT INTO avatar VALUES ('sillyMale.jpg', 1000);
INSERT INTO avatar VALUES ('battlestargalactica.jpg', 1020);

--Insert into ipaddresses
INSERT INTO iptable VALUES ('10.0.1.1', 1000);
INSERT INTO iptable VALUES ('10.0.1.2', 1000);
INSERT INTO iptable VALUES ('98.24.96.12', 1010);


SET FEEDBACK ON
COMMIT;
--
< One query (per table) of the form: SELECT * FROM table; in order to print out your
database >
Select * from users;
Select * from conversation;
Select * from message;
Select * from media;
Select * from takesPartIn;
Select * from isFriendsWith;
Select * from avatar;
Select * from iptable;


--
--< The SQL queries>. Include the following for each query:
--Basic queries that prove that our tables can join to eachother.

--Q1
--Three table join
select u.userID
from users u, conversation c, takesPartIn t
where c.cid = t.cid and t.userID = u.userID;

--Q2
--Four Table join - find out who sent a message that takes part in a conversation
select u.userID, u.FNAME, mes.txt
from users u, conversation c, takesPartIn t, message mes
where u.userID = 1010 and c.cid = t.cid and t.userID = u.userID
and mes.muid = u.userID;

--Q3
--Three table join - find out who sent messages with media attached
select u.userID, u.FNAME, mes.txt, med.fileName, med.fileType
from users u, message mes, media med
where mes.muid = u.userID
and mes.messageKey = med.mKey;

--Q4
--See which users have ipaddresses
select u.FNAME, i.ipaddress
from users u, iptable i
where u.userID = i.userID;

--Q5
--See which users have avatars, and what file they used for their avatar
select u.FNAME, a.avatarFileName
from users u, avatar a
where u.userID = a.userID;

--Q6
--Find all pairs of users that are connected by conversations -- Self-join -- GROUP BY, HAVING, ORDER BY
SELECT u1.userID, u2.userID
FROM users u1, users u2, takesPartIn tp1, takesPartIn tp2
WHERE u1.userID != u2.userID AND
		u1.userID = tp1.userID AND
		u2.userID = tp2.userID AND
		tp1.cid = tp2.cid
GROUP BY u1.userID, u2.userID
HAVING u1.userID < u2.userID
ORDER BY u1.userID;

--Q7
--number of total users in conversations.
SELECT Count(userID)
FROM takesPartIn;

--Q8
--All users that take part in conversations, and which conversation they are apart of.
SELECT u.userID, tpi.cid
FROM users u, takespartin tpi
WHERE u.userID = tpi.userID;

--Q9
--All user that take part in a conversation -- INTERSECT
SELECT userID FROM users
INTERSECT
SELECT userID FROM takespartin

--Q10
--Very basic just ranks all users by there userID -- RANK
SELECT userID, RANK () OVER (ORDER BY userID) AS Rank
FROM users;

--Q11
--More advanced version of the rank query above
--This one Ranks users by how many conversations they are apart of. -- RANK
SELECT u.userID, COUNT(u.userID) AS Num_of_conversations,
	RANK () OVER (ORDER BY COUNT(u.userID) DESC) AS Rank
FROM users u, takespartin tpi
WHERE u.userID = tpi.userID
GROUP BY u.userID
ORDER BY COUNT(u.userID) DESC;

--Q12
--This one does the same as the one above but using a NON CORRELATED subquery -- NON CORRELATED
SELECT userID, COUNT(userID) AS Num_of_conversations,
	RANK () OVER (ORDER BY COUNT(userID) DESC) AS Rank
FROM (SELECT u.userID, tpi.cid
FROM users u, takespartin tpi
WHERE u.userID = tpi.userID)
GROUP BY userID
ORDER BY COUNT(userID) DESC;

--Q13
--finds all users who are not a part of a conversation. -- CORRELATED subquery
SELECT u.userID
FROM users u
WHERE NOT EXISTS (SELECT * FROM takesPartIn tpi WHERE u.userID = tpi.userID);

--Q14
--finds all users who are a part of a conversation. -- CORRELATED subquery
SELECT u.userID
FROM users u
WHERE EXISTS (SELECT * FROM takesPartIn tpi WHERE u.userID = tpi.userID);

--Q15
--shows the min, max, total, and average age of each conversation
SELECT TPI.cid, MIN(U.age) as MinimumAge, MAX(U.age) as MaximumAge, SUM(U.age) as TotalAge, AVG(U.age) as AverageAge
FROM users U, takespartin TPI
WHERE U.userID = TPI.userID
GROUP BY TPI.cid;

--Q16
--shows the user who has sent the most messages
SELECT userID, Messages_Sent
FROM (SELECT U.userID, COUNT(M.messageKey) as Messages_Sent
      FROM users U, message M
      WHERE U.userID = M.muid
      GROUP BY U.userID
      ORDER BY Messages_Sent)
WHERE ROWNUM <= 1;

--Q17
-- shows every user who participates in every conversation Bailey participates in -- DIVISION query
SELECT U.userID, U.lname, U.fname
FROM users U
WHERE NOT EXISTS ((SELECT TPI.cid
                   FROM takespartin TPI, users U2
                   WHERE TPI.userID = U2.userID AND
                         U2.fname = 'Bailey')
                  MINUS
                  (SELECT TPI.cid
                   FROM takespartin TPI
                   WHERE TPI.userID = U.userID));

--Q18
-- shows each users conversations -- OUTER JOIN query
SELECT U.userID, U.lname, TPI.cid
FROM users U LEFT OUTER JOIN takespartin TPI ON U.userID=TPI.userID;

--
--

COMMIT;
--
SPOOL OFF
